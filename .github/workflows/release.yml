name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm install --prefix frontend

      - name: Build frontend
        run: npm run build --prefix frontend

      - name: Run go test
        run: go test ./...

  package:
    name: Package Applications
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows - NSIS + MSIX
          - os: windows-latest
            platform: windows
            formats: "nsis,msix"
          # macOS - .app bundle
          - os: macos-latest
            platform: darwin
            formats: "app"
          # Linux - All formats
          - os: ubuntu-latest
            platform: linux
            formats: "appimage,deb,rpm"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Install Task CLI
        run: go install github.com/go-task/task/v3/cmd/task@latest

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev nsis rpm

      - name: Install WebView2 Runtime
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $arch = (Get-CimInstance Win32_OperatingSystem).OSArchitecture
          switch -Regex ($arch) {
            'ARM64' { $installer = 'MicrosoftEdgeWebView2RuntimeInstallerArm64.exe' }
            '64'    { $installer = 'MicrosoftEdgeWebView2RuntimeInstallerX64.exe' }
            default { $installer = 'MicrosoftEdgeWebView2RuntimeInstallerX86.exe' }
          }
          $downloadUrl = "https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/latest?filepath=/msedge-blob/edgewebview2/production/$installer"
          $installerPath = Join-Path $env:TEMP $installer
          Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath -UseBasicParsing
          Start-Process -FilePath $installerPath -ArgumentList '/silent','/install' -NoNewWindow -Wait
          Remove-Item $installerPath -Force

      - name: Install NSIS (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install nsis -y
          $env:PATH += ";C:\Program Files (x86)\NSIS"
          echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build Application
        run: task build
        env:
          PRODUCTION: "true"

      - name: Package Windows NSIS
        if: runner.os == 'Windows' && contains(matrix.formats, 'nsis')
        run: task windows:create:nsis:installer

      - name: Package Windows MSIX
        if: runner.os == 'Windows' && contains(matrix.formats, 'msix')
        run: task windows:create:msix:package
        continue-on-error: true  # MSIX requires certificates

      - name: Package macOS App
        if: runner.os == 'macOS'
        run: task package

      - name: Package Linux AppImage
        if: runner.os == 'Linux' && contains(matrix.formats, 'appimage')
        run: task linux:create:appimage
        continue-on-error: true

      - name: Package Linux DEB
        if: runner.os == 'Linux' && contains(matrix.formats, 'deb')
        run: task linux:create:deb
        continue-on-error: true

      - name: Package Linux RPM
        if: runner.os == 'Linux' && contains(matrix.formats, 'rpm')
        run: task linux:create:rpm
        continue-on-error: true

      - name: Upload Package Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.platform }}
          path: bin/
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - test
      - package
    permissions:
      contents: write
    env:
      NODE_ENV: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for changelog generation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Install Task CLI
        run: go install github.com/go-task/task/v3/cmd/task@latest

      - name: Download Windows Packages
        uses: actions/download-artifact@v4
        with:
          name: packages-windows
          path: bin/

      - name: Download macOS Packages
        uses: actions/download-artifact@v4
        with:
          name: packages-darwin
          path: bin/

      - name: Download Linux Packages
        uses: actions/download-artifact@v4
        with:
          name: packages-linux
          path: bin/

      - name: List Downloaded Files
        run: |
          echo "=== Downloaded Packages ==="
          ls -lhR bin/

      - name: Release with GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
